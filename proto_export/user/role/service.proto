syntax = "proto3";

package bannote.userservice.role.v1;

import "role/role.proto";
import "common/enums.proto";

option go_package = "github.com/kyumin1227/bannote-proto/gen/go/user-service/role/v1";
option java_multiple_files = true;
option java_package = "com.bannote.userservice.proto.role.v1";

// Gateway에서 gRPC metadata로 전달되는 정보:
// - user-id: 요청하는 유저의 ID
// - user-role: 요청하는 유저의 역할 (ADMIN, STUDENT, EMPLOYEE 등)

// The role service definition.
service RoleService {

//  유저에게 권한 부여 API
  rpc AssignRoleToUser (AssignRoleToUserRequest) returns (AssignRoleToUserResponse) {
  }

//  유저에게서 권한 제거 API
  rpc RemoveRoleFromUser (RemoveRoleFromUserRequest) returns (RemoveRoleFromUserResponse) {
  }

//  유저의 권한 목록 조회 API
  rpc ListUserRoles (ListUserRolesRequest) returns (ListUserRolesResponse) {
  }

//  유저가 특정 권한 레벨을 충족하는지 확인 API (내부용)
  rpc CheckUserHasAuthority (CheckUserHasAuthorityRequest) returns (CheckUserHasAuthorityResponse) {
  }
}

// 유저에게 권한 부여 시 필요한 정보
message AssignRoleToUserRequest {
  string user_code = 1;
  bannote.userservice.common.v1.UserRole role = 2;
}

message AssignRoleToUserResponse {
  UserRoleMapping user_role_mapping = 1;
}

// 유저에게서 권한 제거 시 필요한 정보
message RemoveRoleFromUserRequest {
  string user_code = 1;
  bannote.userservice.common.v1.UserRole role = 2;
}

message RemoveRoleFromUserResponse {
  UserRoleMapping user_role_mapping = 1;
}

// 유저의 권한 목록 조회 시 필요한 정보
message ListUserRolesRequest {
  string user_code = 1;
}

// 유저의 권한 목록 조회 응답
message ListUserRolesResponse {
  repeated bannote.userservice.common.v1.UserRole roles = 1;
}

// 유저 권한 레벨 확인 요청
message CheckUserHasAuthorityRequest {
  string user_code = 1;
  int32 required_level = 2;  // 30이면 반대표(30) 이상 권한 필요
}

// 유저 권한 레벨 확인 응답
message CheckUserHasAuthorityResponse {
  bool has_authority = 1;
  int32 highest_level = 2;  // 유저가 보유한 최고 권한 레벨
}