syntax = "proto3";

// TODO pagenation 수정 필요

package bannote.userservice.user.v1;

import "user/user.proto";
import "common/enums.proto";

option go_package = "github.com/kyumin1227/bannote-proto/gen/go/user-service/user/v1";
option java_multiple_files = true;
option java_package = "com.bannote.userservice.proto.user.v1";

// The user service definition.
service UserService {
//  이메일로 로그인 요청 API
  rpc UserLogin (UserLoginRequest) returns (UserLoginResponse) {
  }

//  회원 가입 API (성공 시 프론트에서 로그인 요청)
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
  }

//  본인이 스스로 변경 가능한 정보를 변경하는 API
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
  }

//  이름으로 유저 검색 API (부분 일치)
  rpc SearchUsersByName (SearchUsersByNameRequest) returns (SearchUsersByNameResponse) {
  }

//  유저 목록 조회 API (다양한 필터 지원)
  rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
  }
}

// 이메일로 로그인 요청
message UserLoginRequest {
  string email = 1;
}

// 로그인 응답
message UserLoginResponse {
  bool exists = 1;
  bool can_login = 2;
  optional string reason = 3;

  // 로그인 가능한 경우
  optional UserDetail user = 4;
}

// 회원 가입 시 필요한 정보
message CreateUserRequest {
  string user_code = 1;
  string user_email = 2;
  string family_name = 3;
  string given_name = 4;
  bannote.userservice.common.v1.UserType user_type = 5;
  string profile_image_url = 6;

  optional string student_class_code = 7;
  optional string department_code = 8;
}

// 회원 가입 응답
message CreateUserResponse {
  bool success = 1;
  bool can_login = 2;
  // 실패 사유
  optional string reason = 3;
  
  // 회원가입 성공 시
  optional UserDetail user = 4;
}

// 학생 생성 시 필요한 정보
message StudentInfo {
  int64 student_class_id = 1;
}

// 직원 생성 시 필요한 정보
message EmployeeInfo {
  int64 department_id = 1;
}

// 본인이 스스로 변경 가능한 정보
message UpdateUserRequest {
  string user_number = 1;
  optional string email = 2;
  optional string family_name = 3;
  optional string given_name = 4;
  optional string bio = 5;
  optional string profile = 6;
}

message UpdateUserResponse {
  UserDetail user = 1;
}

// 이름으로 유저 검색 시 필요한 정보
message SearchUsersByNameRequest {
  string name = 1;  // 검색할 이름 (부분 일치, 초성 검색 도입 필요)
  optional bannote.userservice.common.v1.UserType type = 2;  // 유저 타입 필터 (선택)
  optional bannote.userservice.common.v1.UserStatus status = 3;  // 유저 상태 필터 (선택)
  int32 page = 4;
  int32 size = 5;
}

// 이름으로 유저 검색 응답
message SearchUsersByNameResponse {
  repeated UserBasic users = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 size = 4;
}

// 유저 목록 조회 시 필요한 정보
message ListUsersRequest {
  optional bannote.userservice.common.v1.UserType type = 1;  // 유저 타입 필터 (선택)
  optional bannote.userservice.common.v1.UserStatus status = 2;  // 유저 상태 필터 (선택)
  optional int64 student_class_id = 3;  // 학반 ID 필터 (선택)
  optional int64 department_id = 4;  // 학과 ID 필터 (선택)
  int32 page = 5;
  int32 size = 6;
}

// 유저 목록 조회 응답
message ListUsersResponse {
  repeated UserBasic users = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 size = 4;
}
